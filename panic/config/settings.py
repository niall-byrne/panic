"""
Django settings for panic project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

from django.contrib.messages import constants as message_constants

from .settings_database import DATABASES_AVAILABLE
from .settings_email import *  # pylint: disable=W0614,W0401
from .settings_jwt import SIMPLE_JWT  # pylint: disable=W0611
from .settings_registration import *  # pylint: disable=W0614,W0401
from .settings_restframework import REST_FRAMEWORK_AVAILABLE

# Select Runtime Environment
ENVIRONMENT = os.environ.get('DJANGO_ENVIRONMENT', 'local')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'dj_rest_auth',
    'corsheaders',
    'appengine',
    'kitchen',
    'drf_yasg',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'dj_rest_auth.registration',
    'spa_security',
    'social_accounts',
    'django_bleach',
    'watchman',
]

MIDDLEWARE = [
    'spa_security.auth_cookie.SameSiteMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {'default': DATABASES_AVAILABLE[ENVIRONMENT]}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': (
            'django.contrib.auth.password_validation.'
            'UserAttributeSimilarityValidator'
        ),
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
            'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Session

SESSION_COOKIE_SAMESITE = "Strict"

# Rest Framework Configuration

REST_FRAMEWORK = REST_FRAMEWORK_AVAILABLE[ENVIRONMENT]
REST_COOKIES_SECURE = False  # Development
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'panic_auth'
JWT_AUTH_COOKIE_SAMESITE = 'lax'  # Development

# CSRF

CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = 'lax'  # Development
CSRF_COOKIE_HTTPONLY = True  # Development
CSRF_COOKIE_SECURE = False  # Development
CSRF_TRUSTED_ORIGINS = ['localhost', '127.0.0.1']
CSRF_FAILURE_VIEW = "spa_security.views.csrf_error"
CSRF_COOKIE_NAME = "panic_csrf"

# CORS

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

# Sites

SITE_ID = 1

# Default Message Level

MESSAGE_LEVEL = message_constants.WARNING

# API Versioning

DEFAULT_VERSION = "v1"
ALLOWED_VERSIONS = ("v1",)

# Bleach

BLEACH_RESTORE_LIST = {"&amp;": "&"}

# Watchman Settings

WATCHMAN_TOKENS = os.getenv("WATCHMAN_TOKENS", None)
WATCHMAN_CHECKS = ["watchman.checks.databases"]

# Pagination Settings

PAGE_SIZE = 50
PAGE_SIZE_MAX = 100
PAGE_SIZE_PARAM = "page_size"
PAGE_QUERY_PARAM = "page"
PAGINATION_OVERRIDE_PARAM = "all_results"

TRANSACTION_HISTORY_MAX = 14

# Environment Specific Settings

if ENVIRONMENT == "stage":
  # pylint: disable=W0614,W0401
  from .settings_stage import *  # nocover

if ENVIRONMENT == "prod":
  # pylint: disable=W0614,W0401
  from .settings_prod import *  # nocover

if ENVIRONMENT == "admin":
  # pylint: disable=W0614,W0401
  from .settings_admin import *  # nocover
